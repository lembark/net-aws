#!/bin/env perl
########################################################################
# housekeeping
########################################################################

use v5.20;
use autodie;
use FindBin::libs;

use File::Basename  qw( basename    );
use List::Util      qw( first       );

use Getopt::Long    qw( GetOptions  );
use Pod::Usage      qw( pod2usage   );

use Net::AWS::Glacier;

########################################################################
# package variables
########################################################################

my $base        = basename $0;
my @auth_keyz   = qw( AWSAccessKeyId AWSSecretKey );
my %argz
= do
{
    my @optz
    = qw
    (
        credential_path=s
        inventory_path=s
        verbose!
    );

    my %cmdline = ();

    if( GetOptions \%cmdline, @optz )
    {
        if( $cmdline{ help } )
        {
            pod2usage
            -message    => 'Usage:',
            -exitval    => 1,
            -verbose    => $cmdline{ verbose } || 0
        }
    }
    else
    {
        pod2usage 
        -message    => "$@",
        -exitval    => -1
    }

    %cmdline
};

my $verbose = delete $argz{ verbose };

if
(
    my $path
    = first
    {
        $_ 
    }
    (
        $argz{ credential_path },
        $ENV{ AWS_CREDENTIAL_FILE },
        "$ENV{ HOME }/.aws/credential"
    )
)
{
    say "Credentials from: '$path'";

    -e $path    or die "Bogus $base: non-existant '$path'\n";
    -r _        or die "Bogus $base: un-readable  '$path'\n";
    -s _        or die "Bogus $base: empty        '$path'\n";

    open my $fh, '<', $path;

    my %authnz
    = map
    {
        chomp;
        split '=' => $_, 2
    }
    readline $fh;

    for my $key ( qw( AWSAccessKeyId AWSSecretKey ) )
    {
        $authnz{ $key }
        or die "Bogus credential: '$path' lacks '$key' value"; 
    }

    @argz{ keys %authnz } = values %authnz;
}
else
{
    die "Bogus $0: missing --config and AWS_CREDENTIAL_FILE\n";
}

my $name    = shift
or die "Bogus base: false vault name";

my $vault
= Net::AWS::Glacier::Vault->new 
(
    $name       =>
    key         => $argz{ AWSAccessKeyId    },
    secret      => $argz{ AWSSecretKey      },
    region      => $argz{ Region            },
);

$vault->exists
or die "Bogus $base: '$name' vault does not exist";

$vault->download_current_inventory
(
    $argz{ inventory_path }
);

# this is not a module
0
__END__

=head1 NAME

download_current_inventory -- download inventory of a glacier vault

=head1 SYNOPSIS

    # POD

    download_current_inventory --help;
    download_current_inventory -h;
    download_current_inventory -?;
    download_current_inventory;

    # download a current directory.
    # access AWS using region, access key, secret from credential file.
    # deposit result into inventory file path.

    download_current_inventory                      \
    --credential_path   /credential/file/path.yaml  \
    --inventory_path    /inventory/output/file/path ;

    # abbreviated args

    download_current_inventory          \
    --cred  /credential/file/path.yaml  \
    --inv   /inventory/output/file/path ;

=head1 DESCRIPTION

=head2 Credential File for Glacier.

This is also used with "prove". The format is YAML as a hash-of-hashes
with "Glacier" providing a set of userid's:

    ---
    Glacier :
        User Name:  glacier-test
            Location:           us-east-2
            Access Key ID:      ASDFASDFASDFASDFASDF
            Secret Access Key:  asdfasdfasdfasdfasdfasdfasdfasdfasdf
        User Name:  real-data        
            Location:           us-east-1
            Access Key ID:      ASDFASDFASDFASDFASDF
            Secret Access Key:  asdfasdfasdfasdfasdfasdfasdfasdfasdf

There may be other AWS services defined in the config file, playing
with Vaults will access only the Glacier id.
