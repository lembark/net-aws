#!/bin/env perl
########################################################################
# housekeeping
########################################################################

use v5.20;
use autodie;
use FindBin::libs;

use File::Basename  qw( basename    );
use List::Util      qw( first       );

use Getopt::Long    qw( GetOptions  );
use Pod::Usage      qw( pod2usage   );

use Net::AWS::Glacier;

########################################################################
# package variables
########################################################################

my $base        = basename $0;
my @auth_keyz   = qw( AWSAccessKeyId AWSSecretKey );
my %argz
= do
{
    my @optz
    = qw
    (
        credential_path=s
        inventory_path=s
        verbose!
    );

    my %cmdline = ();

    if( GetOptions \%cmdline, @optz )
    {
        if( $cmdline{ help } )
        {
            pod2usage
            -message    => 'Usage:',
            -exitval    => 1,
            -verbose    => $cmdline{ verbose } || 0
        }
    }
    else
    {
        pod2usage 
        -message    => "$@",
        -exitval    => -1
    }

    %cmdline
};

my $verbose = delete $argz{ verbose };

if
(
    my $path
    = first
    {
        $_ 
    }
    (
        $argz{ credential_path },
        $ENV{ AWS_CREDENTIAL_FILE },
        "$ENV{ HOME }/.aws/credential"
    )
)
{
    say "Credentials from: '$path'";

    -e $path    or die "Bogus $base: non-existant '$path'\n";
    -r _        or die "Bogus $base: un-readable  '$path'\n";
    -s _        or die "Bogus $base: empty        '$path'\n";

    open my $fh, '<', $path;

    my %authnz
    = map
    {
        chomp;
        split '=' => $_, 2
    }
    readline $fh;

    for my $key ( qw( AWSAccessKeyId AWSSecretKey ) )
    {
        $authnz{ $key }
        or die "Bogus credential: '$path' lacks '$key' value"; 
    }

    @argz{ keys %authnz } = values %authnz;
}
else
{
    die "Bogus $0: missing --config and AWS_CREDENTIAL_FILE\n";
}

my $name    = shift
or die "Bogus base: false vault name";

my $vault
= Net::AWS::Glacier::Vault->new 
(
    $name       =>
    key         => $argz{ AWSAccessKeyId    },
    secret      => $argz{ AWSSecretKey      },
    region      => $argz{ Region            },
);

$vault->exists
or die "Bogus $base: '$name' vault does not exist";

$vault->download_current_inventory
(
    $argz{ inventory_path }
);

# this is not a module
0
__END__
